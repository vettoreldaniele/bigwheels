// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "ppx/grfx/grfx_format.h"
#include "ppx/config.h"

namespace ppx {
namespace grfx {

// A static registry of format descriptions.
// The order must match the order of the grfx::Format enum, so that
// retrieving the description for a given format can be done in
// constant time.
constexpr FormatDesc formatDescs[] = {
    // FORMAT_UNDEFINED,
    {FORMAT_DATA_TYPE_UNDEFINED, FORMAT_ASPECT_UNDEFINED, 0, 0, FORMAT_LAYOUT_UNDEFINED, FORMAT_COMPONENT_UNDEFINED, {-1, -1, -1, -1}},

    // FORMAT_R8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R8G8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 2, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 1, -1, -1}},
    // FORMAT_R8G8B8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 1, 2, -1}},
    // FORMAT_R8G8B8A8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 1, 2, 3}},
    // FORMAT_B8G8R8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {2, 1, 0, -1}},
    // FORMAT_B8G8R8A8_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {2, 1, 0, 3}},

    // FORMAT_R8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R8G8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 2, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 1, -1, -1}},
    // FORMAT_R8G8B8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 1, 2, -1}},
    // FORMAT_R8G8B8A8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 1, 2, 3}},
    // FORMAT_B8G8R8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {2, 1, 0, -1}},
    // FORMAT_B8G8R8A8_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {2, 1, 0, 3}},

    // FORMAT_R8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R8G8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 2, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 1, -1, -1}},
    // FORMAT_R8G8B8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 1, 2, -1}},
    // FORMAT_R8G8B8A8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 1, 2, 3}},
    // FORMAT_B8G8R8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {2, 1, 0, -1}},
    // FORMAT_B8G8R8A8_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {2, 1, 0, 3}},

    // FORMAT_R8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R8G8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 2, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 1, -1, -1}},
    // FORMAT_R8G8B8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 1, 2, -1}},
    // FORMAT_R8G8B8A8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 1, 2, 3}},
    // FORMAT_B8G8R8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {2, 1, 0, -1}},
    // FORMAT_B8G8R8A8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {2, 1, 0, 3}},

    // FORMAT_R16_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R16G16_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 4, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 2, -1, -1}},
    // FORMAT_R16G16B16_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 6, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 2, 4, -1}},
    // FORMAT_R16G16B16A16_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 8, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 2, 4, 6}},

    // FORMAT_R16_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R16G16_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 2, -1, -1}},
    // FORMAT_R16G16B16_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 6, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 2, 4, -1}},
    // FORMAT_R16G16B16A16_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 8, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 2, 4, 6}},

    // FORMAT_R16_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R16G16_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 4, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 2, -1, -1}},
    // FORMAT_R16G16B16_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 6, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 2, 4, -1}},
    // FORMAT_R16G16B16A16_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 8, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 2, 4, 6}},

    // FORMAT_R16_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R16G16_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 4, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 2, -1, -1}},
    // FORMAT_R16G16B16_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 6, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 2, 4, -1}},
    // FORMAT_R16G16B16A16_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 8, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 2, 4, 6}},

    // FORMAT_R16_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R16G16_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 4, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 2, -1, -1}},
    // FORMAT_R16G16B16_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 6, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 2, 4, -1}},
    // FORMAT_R16G16B16A16_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 8, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 2, 4, 6}},

    // FORMAT_R32_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 4, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R32G32_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 8, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 4, -1, -1}},
    // FORMAT_R32G32B32_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 12, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 4, 8, -1}},
    // FORMAT_R32G32B32A32_SINT,
    {FORMAT_DATA_TYPE_SINT, FORMAT_ASPECT_COLOR, 16, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 4, 8, 12}},

    // FORMAT_R32_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 4, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R32G32_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 8, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 4, -1, -1}},
    // FORMAT_R32G32B32_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 12, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 4, 8, -1}},
    // FORMAT_R32G32B32A32_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_COLOR, 16, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 4, 8, 12}},

    // FORMAT_R32_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 4, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R32G32_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 8, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 4, -1, -1}},
    // FORMAT_R32G32B32_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 12, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 4, 8, -1}},
    // FORMAT_R32G32B32A32_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 16, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 4, 8, 12}},

    // FORMAT_S8_UINT,
    {FORMAT_DATA_TYPE_UINT, FORMAT_ASPECT_STENCIL, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_STENCIL, {-1, 0}},

    // FORMAT_D16_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_DEPTH, 2, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_DEPTH, {0, -1}},

    // FORMAT_D32_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_DEPTH, 4, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_DEPTH, {0, -1}},

    // FORMAT_D16_UNORM_S8_UINT,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_DEPTH_STENCIL, 3, 2, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_DEPTH_STENCIL, {0, 2}},
    // FORMAT_D24_UNORM_S8_UINT,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_DEPTH_STENCIL, 4, 3, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_DEPTH_STENCIL, {0, 3}},
    // FORMAT_D32_FLOAT_S8_UINT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_DEPTH_STENCIL, 5, 4, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_DEPTH_STENCIL, {0, 4}},

    // FORMAT_R8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 1, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED, {0, -1, -1, -1}},
    // FORMAT_R8G8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 2, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN, {0, 1, -1, -1}},
    // FORMAT_R8G8B8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {0, 1, 2, -1}},
    // FORMAT_R8G8B8A8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {0, 1, 2, 3}},
    // FORMAT_B8G8R8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 3, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE, {2, 1, 0, -1}},
    // FORMAT_B8G8R8A8_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 4, 1, FORMAT_LAYOUT_LINEAR, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {2, 1, 0, 3}},

    // We don't support retrieving component size or byte offsets for packed formats.
    // FORMAT_R10G10B10A2_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_PACKED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_R11G11B10_FLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_PACKED, FORMAT_COMPONENT_RED_GREEN_BLUE, {-1, -1, -1, -1}},

    // For compressed formats, the texel size in bytes is the size required to calculate the row pitch.
    // We don't support retrieving component size or byte offsets for compressed formats.
    // FORMAT_BC1_RGBA_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC1_RGBA_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC1_RGB_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE, {-1, -1, -1, -1}},
    // FORMAT_BC1_RGB_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE, {-1, -1, -1, -1}},
    // FORMAT_BC2_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC2_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC3_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC3_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC4_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED, {-1, -1, -1, -1}},
    // FORMAT_BC4_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 2, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED, {-1, -1, -1, -1}},
    // FORMAT_BC5_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN, {-1, -1, -1, -1}},
    // FORMAT_BC5_SNORM,
    {FORMAT_DATA_TYPE_SNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN, {-1, -1, -1, -1}},
    // FORMAT_BC6H_UFLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE, {-1, -1, -1, -1}},
    // FORMAT_BC6H_SFLOAT,
    {FORMAT_DATA_TYPE_FLOAT, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE, {-1, -1, -1, -1}},
    // FORMAT_BC7_UNORM,
    {FORMAT_DATA_TYPE_UNORM, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
    // FORMAT_BC7_SRGB,
    {FORMAT_DATA_TYPE_SRGB, FORMAT_ASPECT_COLOR, 4, -1, FORMAT_LAYOUT_COMPRESSED, FORMAT_COMPONENT_RED_GREEN_BLUE_ALPHA, {-1, -1, -1, -1}},
};
constexpr size_t formatDescsSize = sizeof(formatDescs) / sizeof(FormatDesc);
static_assert(formatDescsSize == FORMAT_COUNT, "Missing format descriptions");

const FormatDesc* GetFormatDescription(grfx::Format format)
{
    uint32_t formatIndex = static_cast<uint32_t>(format);
    PPX_ASSERT_MSG(format != grfx::FORMAT_UNDEFINED && formatIndex < formatDescsSize, "invalid format");
    return &formatDescs[formatIndex];
}

} // namespace grfx
} // namespace ppx
